apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'

applicationName = "gool"
mainClassName = 'gool.GOOLCompiler'
sourceCompatibility = 1.7
version = '1.0'
description = 'GOOL is free object-oriented code translation software'

allprojects {
	tasks.withType(JavaCompile) {
		options.debug = true
		options.compilerArgs = ['-Xlint:all']
		options.warnings = false
	}
}

run {
	standardInput = System.in 
	if(project.hasProperty("appProp")){
        args appProp
    }
}

sourceSets{
	main {
		java {
			srcDir 'src'
			//exclude 'gool/test/**'
		}
		resources {
			srcDir 'src'
			//exclude 'gool/test/'
		}
		//output.classesDir = file("$buildDir/classes")
	}
//	test {
//		java {
//			srcDir 'src/gool/test'
//			exclude 'GoolTestCpp.java'
//			//exclude 'GoolTestJava.java'
//			exclude 'lib/GoolTestAPINet.java'
//			exclude 'lib/GoolTestAPIThread.java'
//		
//		}
//		//output.classesDir = file("$buildDir/test-classes")
//	}
}

repositories{
	flatDir {
		dirs "lib"
		dirs "${System.properties['java.home']}/../lib"
	}
}

dependencies {
	compile name: 'com.ibm.icu_50.1.1.v201304230130'
	compile name: 'commons-lang-2.5'
	compile name: 'hamcrest-all-1.3'
	compile name: 'ini4j-0.5.2-SNAPSHOT'
	compile name: 'junit-4.11'
	compile name: 'log4j-1.2.15'
	compile name: 'org.eclipse.cdt.core_5.5.0.201309180223'
	compile name: 'org.eclipse.core.contenttype_3.4.200.v20130326-1255'
	compile name: 'org.eclipse.core.jobs_3.5.300.v20130429-1813'
	compile name: 'org.eclipse.core.resources_3.8.101.v20130717-0806'
	compile name: 'org.eclipse.core.runtime_3.9.0.v20130326-1255'
	compile name: 'org.eclipse.equinox.common_3.6.200.v20130402-1505'
	compile name: 'org.eclipse.equinox.preferences_3.5.100.v20130422-1538'
	compile name: 'org.eclipse.equinox.registry_3.5.301.v20130717-1549'
	compile name: 'org.eclipse.osgi_3.9.1.v20130814-1242'
	compile name: 'velocity-1.6.4-dep'
	compile name: 'tools'
	compile name: 'diffutils-1.2.1'
}

test{
	testLogging {
		// Show that tests are run in the command-line output
		events 'started', 'passed'
		showStandardStreams = true
		}
	// listen to events in the test execution lifecycle
	beforeTest {descriptor ->
		logger.lifecycle("Running test: " + descriptor)
  }
	// listen to standard out and standard error of the test JVM(s)
//	onOutput { descriptor, event ->
//		logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
//  }

}

task unitTest(type:Test, dependsOn: assemble) {
	description = "run unit tests"
	testClassesDir = project.sourceSets.test.output.classesDir
	classpath = project.sourceSets.test.runtimeClasspath
	testLogging{
		events 'started', 'passed'
	}
}

//Application distribution tasks

task copySrc(type:Copy) {
	from('src') {
		include '**/*'
		exclude '**/*.java'
	}
	into "$buildDir/src"
}

task copyTests(type:Copy) {
	from('tests') {
		include 'GOOLINPUTJAVA/**'
		include 'GOOLINPUTCPP/**'
	}
	into "$buildDir/tests"
}

applicationDistribution.from(copySrc) {
	into "src"
}

applicationDistribution.from(copyTests) {
	into "tests"
}

//jar construction tasks
//jar {
//  manifest { 
//    attributes "Main-Class": "$mainClassName"
//  }  
//
//  from {
//    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//  }
//}

/*jar{
	manifest{
		attributes 'Main-Class': 'gool.GOOLCompiler',
		'Implementation-Title': 'gool',
		'Implementation-Version': version
	}
}


task sourceJar(type: Jar){
	classifier = 'sources'
	from sourceSets.main.allSource
}*/

//Gradle wrapper
task wrapper (type: Wrapper)
